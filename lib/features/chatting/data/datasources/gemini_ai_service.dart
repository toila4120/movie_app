import 'package:flutter/foundation.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:movie_app/features/chatting/data/datasources/movie_api_client.dart';
import 'package:movie_app/features/chatting/data/models/movie_recommendation_model.dart';
import 'package:movie_app/features/chatting/domain/entities/movie_recommendation.dart';

class GeminiAiService {
  final String apiKey;
  final MovieApiClient movieApiClient;

  GeminiAiService({
    required this.apiKey,
    required this.movieApiClient,
  }) {
    // Check API key only once during initialization
    if (apiKey == 'API_KEY_NOT_FOUND' || apiKey.isEmpty) {
      debugPrint('‚ö†Ô∏è WARNING: Gemini API key not configured or empty!');
    } else if (apiKey == 'test_key') {
      debugPrint('‚ÑπÔ∏è Using test mode with test_key');
    } else {
      debugPrint('‚úÖ Gemini API key configured');
    }
  }

  Future<MovieRecommendationResponseModel> getMovieRecommendations(
      String query) async {
    try {
      // Check if API key is valid
      if (apiKey == 'API_KEY_NOT_FOUND' || apiKey.isEmpty) {
        return const MovieRecommendationResponseModel(
          movies: [],
          aiMessage:
              'Ch∆∞a c·∫•u h√¨nh API key cho Gemini. Vui l√≤ng ki·ªÉm tra file .env v√† th√™m GEMINI_API_KEY.',
        );
      }

      // Return test data in debug mode with test key
      if (kDebugMode && apiKey == 'test_key') {
        debugPrint('üß™ Using test data for query: "$query"');
        await Future.delayed(const Duration(seconds: 1)); // Simulate delay
        return MovieRecommendationResponseModel(
          movies: const [
            MovieRecommendationModel(
              title: "Ng√¥i Tr∆∞·ªùng X√°c S·ªëng",
              slug: "ngoi-truong-xac-song",
              description: "Phim kinh d·ªã v·ªÅ zombie trong tr∆∞·ªùng h·ªçc",
            ),
            MovieRecommendationModel(
              title: "Venom",
              slug: "venom",
              description: "Phim h√†nh ƒë·ªông si√™u anh h√πng Marvel",
            ),
            MovieRecommendationModel(
              title: "Train to Busan",
              slug: "train-to-busan",
              description: "Phim kinh d·ªã H√†n Qu·ªëc v·ªÅ ƒë·∫°i d·ªãch zombie tr√™n t√†u",
            ),
          ],
          aiMessage: "ƒê√¢y l√† k·∫øt qu·∫£ test t·ª´ API Gemini v·ªõi y√™u c·∫ßu: $query",
        );
      }

      final model = GenerativeModel(
        model: 'gemini-2.0-flash-lite',
        apiKey: apiKey,
      );

      final prompt = '''
      B·∫°n l√† tr·ª£ l√Ω t∆∞ v·∫•n phim th√¥ng minh. H√£y g·ª£i √Ω c√°c phim d·ª±a tr√™n y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.
      
      Y√™u c·∫ßu: $query
      
       Ph√¢n t√≠ch y√™u c·∫ßu v√† ƒë∆∞a ra b·ªô phim ph√π h·ª£p. Tr·∫£ v·ªÅ d·ªØ li·ªáu JSON theo ƒë·ªãnh d·∫°ng sau:
      {
        "message": "T√≥m t·∫Øt g·ª£i √Ω c·ªßa b·∫°n",
        "movies": [
          {
            "title": "T√™n phim",
            "slug": "t√™n-phim-ƒë√£-ƒë∆∞·ª£c-slugify",
            "description": "M√¥ t·∫£ ng·∫Øn v·ªÅ phim"
          }
        ]
      }
      
      L∆∞u √Ω:
      - title l√† t√™n phim ti·∫øng vi·ªát ch·ªâ ti·∫øng vi·ªát kh√¥ng c·∫ßn t√™n ti·∫øng anh
      - Chuy·ªÉn ƒë·ªïi t√™n phim th√†nh slug b·∫±ng c√°ch vi·∫øt th∆∞·ªùng v√† thay th·∫ø d·∫•u c√°ch b·∫±ng d·∫•u g·∫°ch ngang
      - Kh√¥ng ch·ª©a d·∫•u ti·∫øng Vi·ªát, ch·ªâ bao g·ªìm a-z, 0-9 v√† d·∫•u g·∫°ch ngang
      - Slug kh√¥ng ƒë∆∞·ª£c c√≥ ch·ªØ c√≥ d·∫•u ti·∫øng Vi·ªát
      - V√≠ d·ª•: "Ng√¥i Tr∆∞·ªùng X√°c S·ªëng" th√†nh "ngoi-truong-xac-song"
      - Tr·∫£ v·ªÅ JSON sau khi t√¨m ki·∫øm phim m√† kh√¥ng in th√™m k·∫øt qu·∫£ n√†o kh√°c.
      ''';

      final content = [Content.text(prompt)];

      // Log prompt in debug mode
      if (kDebugMode) {
        debugPrint('Sending prompt to Gemini: $prompt');
      }

      try {
        // Call Gemini API
        final response = await model.generateContent(content);
        final responseText = response.text ?? '';

        if (kDebugMode) {
          debugPrint('Gemini response: $responseText');
        }

        // Parse the JSON response
        final responseModel =
            MovieRecommendationResponseModel.fromGeminiResponse(responseText);

        // Validate that the recommended movies exist in the API
        final validatedMovies =
            await _validateRecommendedMovies(responseModel.movies);

        if (kDebugMode) {
          debugPrint('Validated movies: ${validatedMovies.length}');
        }

        return MovieRecommendationResponseModel(
          movies: validatedMovies,
          aiMessage: responseModel.aiMessage,
        );
      } catch (apiError) {
        debugPrint('Error calling Gemini API: $apiError');

        // Check if this is a security exception
        if (apiError.toString().contains('SecurityException') ||
            apiError.toString().contains('Unknown calling package name')) {
          return const MovieRecommendationResponseModel(
            movies: [],
            aiMessage:
                'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API Gemini do l·ªói b·∫£o m·∫≠t. Trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng API key test: "test_key"',
          );
        }

        return MovieRecommendationResponseModel(
          movies: const [],
          aiMessage:
              'T√¥i g·∫∑p s·ª± c·ªë khi k·∫øt n·ªëi v·ªõi d·ªãch v·ª• AI. Vui l√≤ng th·ª≠ l·∫°i sau. L·ªói: ${apiError.toString()}',
        );
      }
    } catch (e) {
      debugPrint('Error in Gemini AI service: $e');
      return MovieRecommendationResponseModel(
        movies: const [],
        aiMessage:
            'T√¥i ƒëang g·∫∑p s·ª± c·ªë khi t√¨m phim cho b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau. L·ªói: ${e.toString()}',
      );
    }
  }

  Future<List<MovieRecommendationModel>> _validateRecommendedMovies(
      List<MovieRecommendation> recommendations) async {
    if (recommendations.isEmpty) {
      return [];
    }

    final validatedMovies = <MovieRecommendationModel>[];

    // In test mode, skip actual API validation
    if (kDebugMode && apiKey == 'test_key') {
      return recommendations
          .map((rec) => MovieRecommendationModel(
                title: rec.title,
                slug: rec.slug,
                description: rec.description,
              ))
          .toList();
    }

    for (final recommendation in recommendations) {
      try {
        final exists =
            await movieApiClient.checkMovieExists(recommendation.slug);
        if (exists != null) {
          validatedMovies.add(MovieRecommendationModel(
            title: recommendation.title,
            slug: recommendation.slug,
            description: recommendation.description,
          ));
        } else if (kDebugMode) {
          debugPrint('Movie not found: ${recommendation.slug}');
        }
      } catch (e) {
        debugPrint('Error validating movie ${recommendation.slug}: $e');
      }
    }

    return validatedMovies;
  }
}
